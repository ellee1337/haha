-- ‚úÖ ESP (Box + Name + Distance) + FLY + RAYFIELD UI (BUG-FIXED)

--// Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

--// Load Rayfield UI
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

----------------------------------------------------
-- ‚öôÔ∏è ESP SYSTEM
----------------------------------------------------
local ESP = {
    Enabled = false,
    Boxes = true,
    Names = true,
    Distance = true,
    Color = Color3.fromRGB(255, 170, 0),
    Thickness = 2,
    BoxShift = CFrame.new(0,-1.5,0),
    BoxSize = Vector3.new(4,6,0),
    Objects = {}
}

--// Drawing Helper
local function Draw(obj, props)
    local new = Drawing.new(obj)
    for i,v in pairs(props or {}) do
        new[i] = v
    end
    return new
end

--// ESP Object Base
local boxBase = {}
boxBase.__index = boxBase

function boxBase:Remove()
    for _,v in pairs(self.Components) do
        v.Visible = false
        v:Remove()
    end
    ESP.Objects[self.Object] = nil
end

function boxBase:Update()
    local hrp = self.PrimaryPart
    if not hrp or not hrp.Parent or not ESP.Enabled then
        for _,v in pairs(self.Components) do
            v.Visible = false
        end
        return
    end

    local cf = hrp.CFrame
    local size = self.Size or ESP.BoxSize
    local cf2 = cf * ESP.BoxShift
    local color = ESP.Color

    -- 3D Box Corners
    local tl_world = (cf2 * CFrame.new(size.X/2, size.Y/2, 0)).p
    local tr_world = (cf2 * CFrame.new(-size.X/2, size.Y/2, 0)).p
    local bl_world = (cf2 * CFrame.new(size.X/2, -size.Y/2, 0)).p
    local br_world = (cf2 * CFrame.new(-size.X/2, -size.Y/2, 0)).p
    local tag_world = (cf2 * CFrame.new(0, size.Y/2, 0)).p

    local tl, vis1 = Camera:WorldToViewportPoint(tl_world)
    local tr, vis2 = Camera:WorldToViewportPoint(tr_world)
    local bl, vis3 = Camera:WorldToViewportPoint(bl_world)
    local br, vis4 = Camera:WorldToViewportPoint(br_world)
    local tag, vis5 = Camera:WorldToViewportPoint(tag_world)

    local visible = vis1 or vis2 or vis3 or vis4

    if visible then
        -- Box
        if ESP.Boxes then
            local quad = self.Components.Quad
            quad.PointA = Vector2.new(tr.X, tr.Y)
            quad.PointB = Vector2.new(tl.X, tl.Y)
            quad.PointC = Vector2.new(bl.X, bl.Y)
            quad.PointD = Vector2.new(br.X, br.Y)
            quad.Color = color
            quad.Visible = true
        else
            self.Components.Quad.Visible = false
        end

        -- Name + Distance
        local name = self.Components.Name
        local dist = self.Components.Distance

        if ESP.Names and vis5 then
            name.Visible = true
            name.Position = Vector2.new(tag.X, tag.Y)
            name.Text = self.Name
            name.Color = color
        else
            name.Visible = false
        end

        if ESP.Distance and vis5 then
            dist.Visible = true
            dist.Position = Vector2.new(tag.X, tag.Y + 15)
            dist.Text = string.format("%.0fm", (Camera.CFrame.p - cf.p).Magnitude)
            dist.Color = color
        else
            dist.Visible = false
        end
    else
        for _,v in pairs(self.Components) do v.Visible = false end
    end
end

function ESP:Add(obj, options)
    local box = setmetatable({
        Object = obj,
        Player = options.Player,
        PrimaryPart = options.PrimaryPart or obj:FindFirstChild("HumanoidRootPart"),
        Name = options.Name or obj.Name,
        Size = ESP.BoxSize,
        Components = {}
    }, boxBase)

    box.Components["Quad"] = Draw("Quad", {
        Thickness = ESP.Thickness,
        Color = ESP.Color,
        Filled = false,
        Visible = false
    })

    box.Components["Name"] = Draw("Text", {
        Text = box.Name,
        Size = 18,
        Center = true,
        Outline = true,
        Color = ESP.Color,
        Visible = false
    })

    box.Components["Distance"] = Draw("Text", {
        Text = "",
        Size = 17,
        Center = true,
        Outline = true,
        Color = ESP.Color,
        Visible = false
    })

    ESP.Objects[obj] = box
    return box
end

--// Character Handling
local function CharAdded(char)
    local p = Players:GetPlayerFromCharacter(char)
    if p and p ~= LocalPlayer then
        local hrp = char:WaitForChild("HumanoidRootPart", 10)
        if hrp then
            ESP:Add(char, {Name = p.Name, Player = p, PrimaryPart = hrp})
        end
    end
end

for _,p in pairs(Players:GetPlayers()) do
    if p ~= LocalPlayer and p.Character then CharAdded(p.Character) end
    p.CharacterAdded:Connect(CharAdded)
end

RunService.RenderStepped:Connect(function()
    for _,v in pairs(ESP.Objects) do
        if v then v:Update() end
    end
end)

----------------------------------------------------
-- üïäÔ∏è FLY SYSTEM
----------------------------------------------------
local flying = false
local speed = 5
local gyro, vel

local function startFly()
    local char = LocalPlayer.Character
    if not char or not char:FindFirstChild("HumanoidRootPart") then return end
    local hrp = char.HumanoidRootPart

    gyro = Instance.new("BodyGyro", hrp)
    gyro.P = 9e4
    gyro.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
    gyro.CFrame = hrp.CFrame

    vel = Instance.new("BodyVelocity", hrp)
    vel.MaxForce = Vector3.new(9e9, 9e9, 9e9)

    flying = true
    RunService.RenderStepped:Connect(function()
        if flying then
            gyro.CFrame = Camera.CFrame
            local moveDir = Vector3.zero
            if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                moveDir += Camera.CFrame.LookVector
            elseif UserInputService:IsKeyDown(Enum.KeyCode.S) then
                moveDir -= Camera.CFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                moveDir -= Camera.CFrame.RightVector
            elseif UserInputService:IsKeyDown(Enum.KeyCode.D) then
                moveDir += Camera.CFrame.RightVector
            end
            vel.Velocity = moveDir * speed
        end
    end)
end

local function stopFly()
    flying = false
    if gyro then gyro:Destroy() end
    if vel then vel:Destroy() end
end

----------------------------------------------------
-- ü™ü RAYFIELD UI
----------------------------------------------------
local Window = Rayfield:CreateWindow({
    Name = "ESP + Fly Menu",
    LoadingTitle = "Rayfield UI",
    LoadingSubtitle = "ESP Controller",
    ConfigurationSaving = {Enabled = false}
})

local Tab = Window:CreateTab("Main")

Tab:CreateToggle({
    Name = "ESP Enabled",
    CurrentValue = false,
    Callback = function(v)
        ESP.Enabled = v
    end
})

Tab:CreateToggle({
    Name = "ESP Boxes",
    CurrentValue = true,
    Callback = function(v)
        ESP.Boxes = v
    end
})

Tab:CreateToggle({
    Name = "ESP Names",
    CurrentValue = true,
    Callback = function(v)
        ESP.Names = v
    end
})

Tab:CreateToggle({
    Name = "ESP Distance",
    CurrentValue = true,
    Callback = function(v)
        ESP.Distance = v
    end
})

Tab:CreateToggle({
    Name = "Fly",
    CurrentValue = false,
    Callback = function(v)
        if v then
            startFly()
        else
            stopFly()
        end
    end
})

Tab:CreateSlider({
    Name = "Fly Speed",
    Range = {1, 50},
    Increment = 1,
    CurrentValue = 5,
    Callback = function(value)
        speed = value
    end
})
