-- // Load Rayfield Library
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- // Window Setup
local Window = Rayfield:CreateWindow({
    Name = "⚔️ Combat Admin Panel",
    LoadingTitle = "Player Control System",
    LoadingSubtitle = "by cookie codes",
    ConfigurationSaving = { Enabled = false }
})

-- // Tabs
local MainTab = Window:CreateTab("⚙️ Player Config", "Settings")
local CombatTab = Window:CreateTab("🗡️ Combat Tools", "Sword")
local DebugTab = Window:CreateTab("🧠 Debug", "Bug")

-- // Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- // Remotes
local remotes = ReplicatedStorage:WaitForChild("Remotes")
local damageEvent = remotes:WaitForChild("DamageEvent")
local healEvent = remotes:WaitForChild("HealEvent")
local respawnEvent = remotes:WaitForChild("RespawnEvent")
local damageEffect = remotes:WaitForChild("DamageEffect")

-- // Main Config
local CONFIG = {
    speed = 13,
    jumpPower = 78,
    maxHealth = 206,
    respawnTime = 7,
    debugMode = false
}

-- // Weapons
local weapons = {
    {name = "Sword", damage = 15, cooldown = 0.8, range = 4},
    {name = "Bow", damage = 10, cooldown = 1.2, range = 30},
    {name = "Staff", damage = 25, cooldown = 2.5, range = 15}
}

-- // Utility
local function calculateDamage(baseDamage, distance)
    local modifier = 1
    if distance > 10 then
        modifier = modifier * math.clamp(1 - (distance - 10) * 0.02, 0.3, 1)
    end
    modifier = modifier * (math.random(90, 110) / 100)
    return math.floor(baseDamage * modifier)
end

-- // Setup Player
local function setupPlayer(player)
    player.CharacterAdded:Connect(function(character)
        local humanoid = character:WaitForChild("Humanoid")
        humanoid.WalkSpeed = CONFIG.speed
        humanoid.JumpPower = CONFIG.jumpPower
        humanoid.MaxHealth = CONFIG.maxHealth
        humanoid.Health = CONFIG.maxHealth
    end)

    -- Damage Handler
    damageEvent.OnServerEvent:Connect(function(playerWhoFired, targetPlayer, damageAmount, weaponIndex)
        if playerWhoFired ~= player then return end
        if not targetPlayer or not targetPlayer.Character then return end

        local weapon = weapons[weaponIndex or 1]
        if not weapon then return end

        local attackerRoot = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        local targetRoot = targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart")
        local targetHumanoid = targetPlayer.Character:FindFirstChild("Humanoid")

        if attackerRoot and targetRoot and targetHumanoid then
            local distance = (attackerRoot.Position - targetRoot.Position).Magnitude
            if distance <= weapon.range then
                local finalDamage = calculateDamage(damageAmount or weapon.damage, distance)
                targetHumanoid.Health = math.max(0, targetHumanoid.Health - finalDamage)
                damageEffect:FireClient(targetPlayer, finalDamage)

                if CONFIG.debugMode then
                    print(string.format("[DEBUG] %s hit %s with %s for %d damage (%.1f studs)",
                        player.Name, targetPlayer.Name, weapon.name, finalDamage, distance))
                end
            end
        end
    end)
end

-- // Initialize existing players
for _, player in ipairs(Players:GetPlayers()) do
    setupPlayer(player)
end
Players.PlayerAdded:Connect(setupPlayer)

-- // Respawn System
RunService.Heartbeat:Connect(function()
    for _, player in ipairs(Players:GetPlayers()) do
        local char = player.Character
        if char and char:FindFirstChild("Humanoid") then
            local hum = char.Humanoid
            if hum.Health <= 0 and not char:FindFirstChild("Respawning") then
                local respawning = Instance.new("BoolValue")
                respawning.Name = "Respawning"
                respawning.Parent = char

                task.delay(CONFIG.respawnTime, function()
                    if player and player.Parent == Players then
                        respawnEvent:FireClient(player)
                    end
                    if char and char:FindFirstChild("Respawning") then
                        char.Respawning:Destroy()
                    end
                end)
            end
        end
    end
end)

----------------------------------------------------------------
-- 🧩 Rayfield UI Controls
----------------------------------------------------------------

-- Speed Slider
MainTab:CreateSlider({
    Name = "WalkSpeed",
    Range = {8, 40},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = CONFIG.speed,
    Flag = "WalkSpeed",
    Callback = function(Value)
        CONFIG.speed = Value
        for _, p in ipairs(Players:GetPlayers()) do
            local hum = p.Character and p.Character:FindFirstChild("Humanoid")
            if hum then hum.WalkSpeed = CONFIG.speed end
        end
    end,
})

-- JumpPower Slider
MainTab:CreateSlider({
    Name = "JumpPower",
    Range = {50, 150},
    Increment = 1,
    Suffix = "Power",
    CurrentValue = CONFIG.jumpPower,
    Flag = "JumpPower",
    Callback = function(Value)
        CONFIG.jumpPower = Value
        for _, p in ipairs(Players:GetPlayers()) do
            local hum = p.Character and p.Character:FindFirstChild("Humanoid")
            if hum then hum.JumpPower = CONFIG.jumpPower end
        end
    end,
})

-- Respawn Time Slider
MainTab:CreateSlider({
    Name = "Respawn Time",
    Range = {3, 15},
    Increment = 1,
    Suffix = "sec",
    CurrentValue = CONFIG.respawnTime,
    Flag = "RespawnTime",
    Callback = function(Value)
        CONFIG.respawnTime = Value
    end,
})

-- Debug Toggle
DebugTab:CreateToggle({
    Name = "Enable Debug Mode",
    CurrentValue = CONFIG.debugMode,
    Flag = "DebugMode",
    Callback = function(Value)
        CONFIG.debugMode = Value
        Rayfield:Notify({
            Title = "Debug Mode",
            Content = Value and "Enabled ✅" or "Disabled ❌",
            Duration = 3,
            Image = "info"
        })
    end,
})

-- Respawn Button
CombatTab:CreateButton({
    Name = "Force Respawn All Players",
    Callback = function()
        for _, p in ipairs(Players:GetPlayers()) do
            respawnEvent:FireClient(p)
        end
        Rayfield:Notify({
            Title = "Respawn Triggered",
            Content = "All players have been respawned.",
            Duration = 3,
            Image = "check"
        })
    end,
})

----------------------------------------------------------------
-- ✅ UI Loaded Notification
----------------------------------------------------------------
Rayfield:Notify({
    Title = "Combat Admin Panel",
    Content = "Rayfield UI successfully initialized.",
    Duration = 4,
    Image = "check"
})
