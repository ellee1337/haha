local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
    
    local Window = Rayfield:CreateWindow({
        Name = "Fruit Battlegrounds",
        Icon = 0,
        LoadingTitle = "Lynx",
        LoadingSubtitle = "by Elle",
        ShowText = "Rayfield",
        Theme = "Default",
        ToggleUIKeybind = "K",
        DisableRayfieldPrompts = false,
        DisableBuildWarnings = false,
        ConfigurationSaving = {
            Enabled = true,
            FolderName = nil,
            FileName = "impact1"
        },
        Discord = {
            Enabled = true,
            Invite = "https://discord.gg/XQYCxTBqCm",
            RememberJoins = true
        },
        KeySystem = true,
        KeySettings = {
            Title = "Lynx",
            Subtitle = "Key System",
            Note = "password:LYNX",
            FileName = "impact1",
            SaveKey = true,
            GrabKeyFromSite = false,
            Key = {"LYNX"}
        }
    })

Rayfield:Notify({
        Title = "Script Loaded",
        Content = "Thanks for using Elle Cheats - Fruit Battlegrounds",
        Duration = 5,
        Image = nil,
    })

    -- Variables for Fruit Battlegrounds
    local savedSpeed = 16 -- Default walk speed
    local savedJumpHeight = 7.2 -- Default jump height
    
    -- ESP Variables
    local espEnabled = false
    local espConnection = nil
    local highlights = {}
    local nameTags = {}
    local healthBars = {}
    local distanceTags = {}
    
    -- Combat Variables
local aimbotEnabled = false
local aimbotConnection = nil
local aimbotFOV = 100
local aimbotSmoothness = 0.8
local fovCircle = nil
local autoFarmEnabled = false
local autoFarmConnection = nil
local autoFarmRunning = false
local autoFarmStayTime = 2 -- Time to stay on each skill (2 seconds)
local autoFarmTimer = 0
local lastAutoFarmTime = 0

    -- Function to apply saved speed and jump settings
    local function applySavedSettings()
        local Player = game.Players.LocalPlayer
        if Player.Character and Player.Character:FindFirstChild("Humanoid") then
            local Humanoid = Player.Character.Humanoid
            
            -- Apply saved speed
            if savedSpeed ~= 16 then
                Humanoid.WalkSpeed = savedSpeed
            end
            
            -- Apply saved jump height
            if savedJumpHeight ~= 7.2 then
                Humanoid.UseJumpPower = false
                Humanoid.JumpHeight = savedJumpHeight
            end
        end
    end

    -- Create Player tab
    local PlayerTab = Window:CreateTab("Player", nil)
    
    -- Create ESP tab
    local ESPTab = Window:CreateTab("ESP", nil)
    
    -- Create Combat tab
    local CombatTab = Window:CreateTab("Combat", nil)
    
    -- Create Teleport tab
    local TeleportTab = Window:CreateTab("Teleport", nil)

    -- Auto-apply settings on respawn
    local Player = game.Players.LocalPlayer
    Player.CharacterAdded:Connect(function(character)
        wait(1) -- Wait for character to fully load
        applySavedSettings()
    end)

    -- Speed Modifier Slider
    local SpeedSlider = PlayerTab:CreateSlider({
        Name = "Speed Modifier",
        Range = {16, 200},
        Increment = 1,
        Suffix = " Speed",
        CurrentValue = 16,
        Flag = "SpeedSlider",
        Callback = function(Value)
            savedSpeed = Value
            local Player = game.Players.LocalPlayer
            if Player.Character and Player.Character:FindFirstChild("Humanoid") then
                Player.Character.Humanoid.WalkSpeed = Value
            end
            
            Rayfield:Notify({
                Title = "Bilis",
                Content = "Speed set to: " .. Value .. " (will auto-apply on respawn)",
                Duration = 2,
            })
        end,
    })

    -- Jump Modifier Slider
    local JumpSlider = PlayerTab:CreateSlider({
        Name = "Jump Modifier",
        Range = {7.2, 200},
        Increment = 1,
        Suffix = " Jump Height",
        CurrentValue = 7.2,
        Flag = "JumpSlider",
        Callback = function(Value)
            savedJumpHeight = Value
            local Player = game.Players.LocalPlayer
            if Player.Character and Player.Character:FindFirstChild("Humanoid") then
                Player.Character.Humanoid.UseJumpPower = false
                Player.Character.Humanoid.JumpHeight = Value
            end
            
            Rayfield:Notify({
                Title = "Talon",
                Content = "Jump height set to: " .. Value .. " (will auto-apply on respawn)",
                Duration = 2,
            })
        end,
    })
    
    -- Noclip Variables
    local noclipEnabled = false
    local noclipConnection = nil
    
    -- Noclip Function
    local function noclip()
        local Player = game.Players.LocalPlayer
        local Character = Player.Character
        if not Character then return end
        
        for _, part in pairs(Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
    end
    
    -- Noclip Toggle
    local NoclipToggle = PlayerTab:CreateToggle({
        Name = "Noclip",
        CurrentValue = false,
        Flag = "NoclipToggle",
        Callback = function(Value)
            noclipEnabled = Value
            if Value then
                noclipConnection = game:GetService("RunService").Heartbeat:Connect(noclip)
                Rayfield:Notify({
                    Title = "Noclip",
                    Content = "Pwede kana tumagos defuta ka",
                    Duration = 3,
                })
            else
                if noclipConnection then
                    noclipConnection:Disconnect()
                    noclipConnection = nil
                end
                Rayfield:Notify({
                    Title = "Noclip",
                    Content = "Noclip disabled",
                    Duration = 2,
                })
            end
        end,
    })
    
    -- ESP Functions
    local function createNameTag(player)
        if nameTags[player] then return end
        
        local nameTag = Instance.new("BillboardGui")
        nameTag.Name = "NameTag"
        nameTag.Size = UDim2.new(0, 200, 0, 50)
        nameTag.StudsOffset = Vector3.new(0, 4, 0)
        nameTag.AlwaysOnTop = true
        nameTag.Adornee = player.Character and player.Character:FindFirstChild("Head")
        
        local nameLabel = Instance.new("TextLabel")
        nameLabel.Size = UDim2.new(1, 0, 1, 0)
        nameLabel.BackgroundTransparency = 1
        nameLabel.TextColor3 = Color3.new(1, 1, 1)
        nameLabel.TextStrokeTransparency = 0
        nameLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
        nameLabel.Text = player.Name
        nameLabel.Font = Enum.Font.SourceSansBold
        nameLabel.TextScaled = true
        nameLabel.Parent = nameTag
        
        nameTag.Parent = player.Character and player.Character:FindFirstChild("Head")
        nameTags[player] = nameTag
    end
    
    local function createHealthBar(player)
        if healthBars[player] then return end
        
        local healthBar = Instance.new("BillboardGui")
        healthBar.Name = "HealthBar"
        healthBar.Size = UDim2.new(0, 100, 0, 10)
        healthBar.StudsOffset = Vector3.new(0, 3, 0)
        healthBar.AlwaysOnTop = true
        healthBar.Adornee = player.Character and player.Character:FindFirstChild("Head")
        
        local healthFrame = Instance.new("Frame")
        healthFrame.Size = UDim2.new(1, 0, 1, 0)
        healthFrame.BackgroundColor3 = Color3.new(0, 0, 0)
        healthFrame.BorderSizePixel = 1
        healthFrame.BorderColor3 = Color3.new(1, 1, 1)
        healthFrame.Parent = healthBar
        
        local healthFill = Instance.new("Frame")
        healthFill.Size = UDim2.new(1, 0, 1, 0)
        healthFill.BackgroundColor3 = Color3.new(0, 1, 0)
        healthFill.BorderSizePixel = 0
        healthFill.Parent = healthFrame
        
        healthBar.Parent = player.Character and player.Character:FindFirstChild("Head")
        healthBars[player] = healthBar
    end
    
    local function createDistanceTag(player)
        if distanceTags[player] then return end
        
        local distanceTag = Instance.new("BillboardGui")
        distanceTag.Name = "DistanceTag"
        distanceTag.Size = UDim2.new(0, 200, 0, 30)
        distanceTag.StudsOffset = Vector3.new(0, 2, 0)
        distanceTag.AlwaysOnTop = true
        distanceTag.Adornee = player.Character and player.Character:FindFirstChild("Head")
        
        local distanceLabel = Instance.new("TextLabel")
        distanceLabel.Size = UDim2.new(1, 0, 1, 0)
        distanceLabel.BackgroundTransparency = 1
        distanceLabel.TextColor3 = Color3.new(1, 1, 0)
        distanceLabel.TextStrokeTransparency = 0
        distanceLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
        distanceLabel.Font = Enum.Font.SourceSans
        distanceLabel.TextScaled = true
        distanceLabel.Parent = distanceTag
        
        distanceTag.Parent = player.Character and player.Character:FindFirstChild("Head")
        distanceTags[player] = distanceTag
    end
    
    local function updateAllPlayerHighlights()
        for _, player in pairs(game.Players:GetPlayers()) do
            if player ~= game.Players.LocalPlayer then
                if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    if not highlights[player] then
                        local highlight = Instance.new("Highlight")
                        highlight.FillColor = Color3.new(1, 0, 0)
                        highlight.OutlineColor = Color3.new(1, 1, 1)
                        highlight.FillTransparency = 0.5
                        highlight.OutlineTransparency = 0
                        highlight.Parent = player.Character
                        highlights[player] = highlight
                    end
                end
            end
        end
    end
    
    local function clearAllHighlights()
        for player, highlight in pairs(highlights) do
            if highlight and highlight.Parent then
                highlight:Destroy()
            end
        end
        highlights = {}
    end
    
    local function clearAllNameTags()
        for player, nameTag in pairs(nameTags) do
            if nameTag and nameTag.Parent then
                nameTag:Destroy()
            end
        end
        nameTags = {}
    end
    
    local function clearAllHealthBars()
        for player, healthBar in pairs(healthBars) do
            if healthBar and healthBar.Parent then
                healthBar:Destroy()
            end
        end
        healthBars = {}
    end
    
    local function clearAllDistanceTags()
        for player, distanceTag in pairs(distanceTags) do
            if distanceTag and distanceTag.Parent then
                distanceTag:Destroy()
            end
        end
        distanceTags = {}
    end
    
    -- ESP Toggles
    local ESPToggle = ESPTab:CreateToggle({
        Name = "ESP All Players",
        CurrentValue = false,
        Flag = "ESPToggle",
        Callback = function(Value)
            espEnabled = Value
            if Value then
                updateAllPlayerHighlights()
                Rayfield:Notify({
                    Title = "ESP",
                    Content = "Edi kita mo na lahat HAHA",
                    Duration = 2,
                })
            else
                clearAllHighlights()
                Rayfield:Notify({
                    Title = "ESP",
                    Content = "ESP disabled",
                    Duration = 2,
                })
            end
        end,
    })
    
    local NameTagsToggle = ESPTab:CreateToggle({
        Name = "Name Tags",
        CurrentValue = false,
        Flag = "NameTagsToggle",
        Callback = function(Value)
            if Value then
                for _, player in pairs(game.Players:GetPlayers()) do
                    if player ~= game.Players.LocalPlayer and player.Character then
                        createNameTag(player)
                    end
                end
                Rayfield:Notify({
                    Title = "Name Tags",
                    Content = "Name tags enabled",
                    Duration = 2,
                })
            else
                clearAllNameTags()
                Rayfield:Notify({
                    Title = "Name Tags",
                    Content = "Name tags disabled",
                    Duration = 2,
                })
            end
        end,
    })
    
    local HealthBarsToggle = ESPTab:CreateToggle({
        Name = "Health Bars",
        CurrentValue = false,
        Flag = "HealthBarsToggle",
        Callback = function(Value)
            if Value then
                for _, player in pairs(game.Players:GetPlayers()) do
                    if player ~= game.Players.LocalPlayer and player.Character then
                        createHealthBar(player)
                    end
                end
                Rayfield:Notify({
                    Title = "Health Bars",
                    Content = "Health bars enabled",
                    Duration = 2,
                })
            else
                clearAllHealthBars()
                Rayfield:Notify({
                    Title = "Health Bars",
                    Content = "Health bars disabled",
                    Duration = 2,
                })
            end
        end,
    })
    
    local DistanceToggle = ESPTab:CreateToggle({
        Name = "Distance Tags",
        CurrentValue = false,
        Flag = "DistanceToggle",
        Callback = function(Value)
            if Value then
                for _, player in pairs(game.Players:GetPlayers()) do
                    if player ~= game.Players.LocalPlayer and player.Character then
                        createDistanceTag(player)
                    end
                end
                Rayfield:Notify({
                    Title = "Distance Tags",
                    Content = "Distance tags enabled",
                    Duration = 2,
                })
            else
                clearAllDistanceTags()
                Rayfield:Notify({
                    Title = "Distance Tags",
                    Content = "Distance tags disabled",
                    Duration = 2,
                })
            end
        end,
    })
    
    -- ESP Update Loop
    local RunService = game:GetService("RunService")
    RunService.RenderStepped:Connect(function()
        if espEnabled then
            updateAllPlayerHighlights()
        end
        
        -- Update distance tags
        for player, distanceTag in pairs(distanceTags) do
            if player.Character and player.Character:FindFirstChild("Head") and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local distance = (player.Character.Head.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                local distanceLabel = distanceTag:FindFirstChild("TextLabel")
                if distanceLabel then
                    distanceLabel.Text = math.floor(distance) .. " studs"
                end
            end
        end
        
        -- Update health bars
        for player, healthBar in pairs(healthBars) do
            if player.Character and player.Character:FindFirstChild("Humanoid") then
                local healthPercent = player.Character.Humanoid.Health / player.Character.Humanoid.MaxHealth
                local healthFill = healthBar.Frame:FindFirstChild("Frame")
                if healthFill then
                    healthFill.Size = UDim2.new(healthPercent, 0, 1, 0)
                    if healthPercent > 0.5 then
                        healthFill.BackgroundColor3 = Color3.new(0, 1, 0)
                    elseif healthPercent > 0.25 then
                        healthFill.BackgroundColor3 = Color3.new(1, 1, 0)
                    else
                        healthFill.BackgroundColor3 = Color3.new(1, 0, 0)
                    end
                end
            end
        end
    end)
    
    -- Handle new players joining
    game.Players.PlayerAdded:Connect(function(player)
        player.CharacterAdded:Connect(function(character)
            if espEnabled then
                wait(1)
                updateAllPlayerHighlights()
            end
        end)
    end)
    
    -- Handle players leaving
    game.Players.PlayerRemoving:Connect(function(player)
        if highlights[player] then
            highlights[player]:Destroy()
            highlights[player] = nil
        end
        if nameTags[player] then
            nameTags[player]:Destroy()
            nameTags[player] = nil
        end
        if healthBars[player] then
            healthBars[player]:Destroy()
            healthBars[player] = nil
        end
        if distanceTags[player] then
            distanceTags[player]:Destroy()
            distanceTags[player] = nil
        end
    end)
    
    -- Combat Functions
    local function createFOVCircle()
        if fovCircle then
            fovCircle:Remove()
        end
        
        fovCircle = Drawing.new("Circle")
        fovCircle.Thickness = 2
        fovCircle.NumSides = 100
        fovCircle.Radius = aimbotFOV
        fovCircle.Filled = false
        fovCircle.Visible = aimbotEnabled
        fovCircle.Color = Color3.fromRGB(255, 255, 255)
        fovCircle.Position = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y / 2)
    end
    
    local function getClosestPlayerInFOV()
        local closestPlayer = nil
        local shortestDistance = math.huge
        local localPlayer = game.Players.LocalPlayer
        local localCharacter = localPlayer.Character
        
        if not localCharacter or not localCharacter:FindFirstChild("HumanoidRootPart") then
            return nil
        end
        
        for _, player in pairs(game.Players:GetPlayers()) do
            if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0 then
                local targetCharacter = player.Character
                local targetRootPart = targetCharacter.HumanoidRootPart
                local targetHead = targetCharacter:FindFirstChild("Head")
                
                if targetHead then
                    local targetScreenPos, onScreen = workspace.CurrentCamera:WorldToViewportPoint(targetHead.Position)
                    
                    if onScreen then
                        local screenCenter = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y / 2)
                        local targetScreenPos2D = Vector2.new(targetScreenPos.X, targetScreenPos.Y)
                        local distance = (targetScreenPos2D - screenCenter).Magnitude
                        
                        if distance <= aimbotFOV and distance < shortestDistance then
                            closestPlayer = player
                            shortestDistance = distance
                        end
                    end
                end
            end
        end
        
        return closestPlayer
    end
    
    local function autoFarm()
        local VirtualInputManager = game:GetService("VirtualInputManager")
        
        -- Debug notification
        Rayfield:Notify({
            Title = "Auto Farm",
            Content = "Mag auto farm kana engot...",
            Duration = 1,
        })
        
        -- Press key 1
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.One, false, game)
        task.wait(0.05)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.One, false, game)
        task.wait(0.05)
        
        -- Press key 2
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Two, false, game)
        task.wait(0.05)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Two, false, game)
        task.wait(0.05)
        
        -- Press key 3
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Three, false, game)
        task.wait(0.05)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Three, false, game)
        task.wait(0.05)
        
        -- Press key 4
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Four, false, game)
        task.wait(0.05)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Four, false, game)
        task.wait(0.05)
        
        -- Press key 5
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Five, false, game)
        task.wait(0.05)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Five, false, game)
        task.wait(0.05)
        
        -- Press key 6
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Six, false, game)
        task.wait(0.05)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Six, false, game)
        task.wait(0.05)
        
        -- Simulate click using mouse button event
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
        task.wait(0.02)
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, 0)
    end

-- New function to execute one skill at a time
local currentSkillIndex = 1
local function executeNextSkill()
    local VirtualInputManager = game:GetService("VirtualInputManager")
    
    -- Execute the current skill
    if currentSkillIndex == 1 then
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.One, false, game)
        task.wait(0.1)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.One, false, game)
        task.wait(0.1)
        Rayfield:Notify({
            Title = "Auto Farm",
            Content = "Executing Skill 1",
            Duration = 1,
        })
    elseif currentSkillIndex == 2 then
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Two, false, game)
        task.wait(0.1)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Two, false, game)
        task.wait(0.1)
        Rayfield:Notify({
            Title = "Auto Farm",
            Content = "Executing Skill 2",
            Duration = 1,
        })
    elseif currentSkillIndex == 3 then
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Three, false, game)
        task.wait(0.1)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Three, false, game)
        task.wait(0.1)
        Rayfield:Notify({
            Title = "Auto Farm",
            Content = "Executing Skill 3",
            Duration = 1,
        })
    elseif currentSkillIndex == 4 then
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Four, false, game)
        task.wait(0.1)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Four, false, game)
        task.wait(0.1)
        Rayfield:Notify({
            Title = "Auto Farm",
            Content = "Executing Skill 4",
            Duration = 1,
        })
    elseif currentSkillIndex == 5 then
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Five, false, game)
        task.wait(0.1)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Five, false, game)
        task.wait(0.1)
        Rayfield:Notify({
            Title = "Auto Farm",
            Content = "Executing Skill 5",
            Duration = 1,
        })
    elseif currentSkillIndex == 6 then
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Six, false, game)
        task.wait(0.1)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Six, false, game)
        task.wait(0.1)
        Rayfield:Notify({
            Title = "Auto Farm",
            Content = "Executing Skill 6",
            Duration = 1,
        })
    end
    
    -- Always click after executing a skill
    VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
    task.wait(0.05)
    VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, 0)
    task.wait(0.05)
    
    -- Move to next skill
    currentSkillIndex = currentSkillIndex + 1
    if currentSkillIndex > 6 then
        currentSkillIndex = 1 -- Reset to first skill
    end
    
    -- Add a small delay to ensure the skill is properly registered
    task.wait(0.2)
end
    
    -- Combat Toggles
    local AimbotToggle = CombatTab:CreateToggle({
        Name = "Aimbot",
        CurrentValue = false,
        Flag = "AimbotToggle",
        Callback = function(Value)
            aimbotEnabled = Value
            if Value then
                createFOVCircle()
                aimbotConnection = RunService.RenderStepped:Connect(function()
                    if fovCircle then
                        fovCircle.Visible = true
                    end
                    
                    local UserInputService = game:GetService("UserInputService")
                    if UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2) then
                        local targetPlayer = getClosestPlayerInFOV()
                                                 if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head") then
                             local targetHead = targetPlayer.Character.Head
                             local camera = workspace.CurrentCamera
                             local targetCFrame = CFrame.new(camera.CFrame.Position, targetHead.Position)
                             camera.CFrame = camera.CFrame:Lerp(targetCFrame, aimbotSmoothness)
                         end
                    end
                end)
                Rayfield:Notify({
                    Title = "Aimbot",
                    Content = "Aimbot enabled (Hold Right Click)",
                    Duration = 2,
                })
            else
                if aimbotConnection then
                    aimbotConnection:Disconnect()
                    aimbotConnection = nil
                end
                if fovCircle then
                    fovCircle.Visible = false
                end
                Rayfield:Notify({
                    Title = "Aimbot",
                    Content = "Aimbot disabled",
                    Duration = 2,
                })
            end
        end,
    })
    
         local FOVSlider = CombatTab:CreateSlider({
         Name = "Aimbot FOV",
         Range = {50, 300},
         Increment = 10,
         Suffix = " FOV",
         CurrentValue = 100,
         Flag = "FOVSlider",
         Callback = function(Value)
             aimbotFOV = Value
             if fovCircle then
                 fovCircle.Radius = Value
             end
             Rayfield:Notify({
                 Title = "FOV",
                 Content = "FOV set to: " .. Value,
                 Duration = 2,
             })
         end,
     })
     
     local SmoothnessSlider = CombatTab:CreateSlider({
         Name = "Aimbot Smoothness",
         Range = {0.1, 1.0},
         Increment = 0.1,
         Suffix = " Smoothness",
         CurrentValue = 0.8,
         Flag = "SmoothnessSlider",
         Callback = function(Value)
             aimbotSmoothness = Value
             Rayfield:Notify({
                 Title = "Smoothness",
                 Content = "Aimbot smoothness set to: " .. string.format("%.1f", Value),
                 Duration = 2,
             })
         end,
     })
    
    local AutoFarmToggle = CombatTab:CreateToggle({
        Name = "Auto Farm",
        CurrentValue = false,
        Flag = "AutoFarmToggle",
        Callback = function(Value)
            autoFarmEnabled = Value
            if Value then
                autoFarmTimer = 0
                lastAutoFarmTime = tick()
                autoFarmConnection = RunService.Heartbeat:Connect(function()
                    if autoFarmEnabled and not autoFarmRunning then
                        local currentTime = tick()
                        autoFarmTimer = currentTime - lastAutoFarmTime
                        
                        -- Only execute next skill if we've waited the specified time
                        if autoFarmTimer >= autoFarmStayTime then
                            autoFarmRunning = true
                            task.spawn(function()
                                executeNextSkill()
                                lastAutoFarmTime = currentTime
                                autoFarmTimer = 0
                                task.wait(0.1) -- Small delay to prevent spam
                                autoFarmRunning = false
                            end)
                        end
                    end
                end)
                Rayfield:Notify({
                    Title = "Auto Farm",
                    Content = "Auto Farm enabled - Executing one skill every " .. autoFarmStayTime .. " seconds",
                    Duration = 2,
                })
            else
                if autoFarmConnection then
                    autoFarmConnection:Disconnect()
                    autoFarmConnection = nil
                end
                autoFarmRunning = false
                autoFarmTimer = 0
                lastAutoFarmTime = 0
                Rayfield:Notify({
                    Title = "Auto Farm",
                    Content = "Auto Farm disabled",
                    Duration = 2,
                })
            end
        end,
    })
    
    -- AutoFarm Stay Time Slider
    local AutoFarmStayTimeSlider = CombatTab:CreateSlider({
        Name = "AutoFarm Stay Time",
        Range = {1, 5},
        Increment = 0.5,
        Suffix = " seconds",
        CurrentValue = 2,
        Flag = "AutoFarmStayTimeSlider",
        Callback = function(Value)
            autoFarmStayTime = Value
            Rayfield:Notify({
                Title = "AutoFarm Stay Time",
                Content = "Stay time set to: " .. Value .. " seconds per skill",
                Duration = 2,
            })
        end,
    })
    

    

    

    
    -- NPC Teleport Section
    local NPCTPSection = TeleportTab:CreateSection("NPC Teleport")
    
    -- Function to teleport to NPCs
    local function teleportToNPC(npcName)
        local npcsFolder = workspace:FindFirstChild("NPCs")
        if npcsFolder then
            local targetNPC = npcsFolder:FindFirstChild(npcName)
            if targetNPC then
                local localPlayer = game.Players.LocalPlayer
                if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    -- Try to find a part in the NPC to teleport to
                    local targetPart = targetNPC:FindFirstChild("HumanoidRootPart") or targetNPC:FindFirstChild("Torso") or targetNPC:FindFirstChild("Head")
                    if targetPart then
                        localPlayer.Character.HumanoidRootPart.CFrame = targetPart.CFrame
                        return true
                    else
                        -- If no specific part found, teleport to the NPC's position
                        localPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(targetNPC.Position)
                        return true
                    end
                end
            end
        end
        return false
    end
    
    -- Create NPC teleport buttons
    local npcsFolder = workspace:FindFirstChild("NPCs")
    if npcsFolder then
        for _, npc in pairs(npcsFolder:GetChildren()) do
            if npc:IsA("Model") then
                local NPCTPButton = TeleportTab:CreateButton({
                    Name = "TP to " .. npc.Name,
                    Callback = function()
                        if teleportToNPC(npc.Name) then
                            Rayfield:Notify({
                                Title = "NPC Teleport",
                                Content = "Teleported to " .. npc.Name,
                                Duration = 2,
                            })
                        else
                            Rayfield:Notify({
                                Title = "NPC Teleport Error",
                                Content = "Failed to teleport to " .. npc.Name,
                                Duration = 3,
                            })
                        end
                    end,
                })
            end
        end
    end
