-- Combat UI (LocalScript)
-- Place this LocalScript in StarterPlayerScripts
-- Works with the provided server script (expects Remotes in ReplicatedStorage)

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local StarterGui = game:GetService("StarterGui")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Wait for remotes (these must exist in ReplicatedStorage as in the server script)
local remotes = ReplicatedStorage:WaitForChild("Remotes")
local damageEvent = remotes:WaitForChild("DamageEvent")
local healEvent = remotes:WaitForChild("HealEvent")
local respawnEvent = remotes:WaitForChild("RespawnEvent")
local changeConfigRemote = remotes:FindFirstChild("ChangeConfigRequest") -- optional

-- Helper to create UI elements faster
local function make(class, props)
    local obj = Instance.new(class)
    for k,v in pairs(props or {}) do
        if k == "Parent" then obj.Parent = v else obj[k] = v end
    end
    return obj
end

-- Root ScreenGui
local screenGui = make("ScreenGui", {Parent = playerGui, Name = "CombatUI"})

-- Main frame
local main = make("Frame", {
    Parent = screenGui,
    Name = "MainFrame",
    AnchorPoint = Vector2.new(0,0),
    Position = UDim2.new(0.02,0,0.05,0),
    Size = UDim2.new(0,250,0,320),
    BackgroundColor3 = Color3.fromRGB(30,30,30),
    BorderSizePixel = 0,
    BackgroundTransparency = 0.1
})

make("UICorner", {Parent = main, CornerRadius = UDim.new(0,8)})

local title = make("TextLabel", {
    Parent = main,
    Size = UDim2.new(1,0,0,36),
    BackgroundTransparency = 1,
    Text = "Combat — Player UI",
    TextColor3 = Color3.new(1,1,1),
    Font = Enum.Font.SourceSansBold,
    TextSize = 18
})

-- Simple label+textbox creator
local function labeledTextbox(parent, labelText, default, y)
    local lbl = make("TextLabel", {
        Parent = parent,
        Size = UDim2.new(0.6,0,0,28),
        Position = UDim2.new(0.02,0,y,0),
        BackgroundTransparency = 1,
        Text = labelText,
        TextSize = 14,
        TextColor3 = Color3.new(1,1,1),
        Font = Enum.Font.SourceSans
    })
    local txt = make("TextBox", {
        Parent = parent,
        Size = UDim2.new(0.36,0,0,28),
        Position = UDim2.new(0.62,0,y,0),
        Text = tostring(default or ""),
        TextSize = 14,
        TextColor3 = Color3.new(0,0,0),
        Font = Enum.Font.SourceSans,
        ClearTextOnFocus = false
    })
    return txt
end

-- Speed, Jump, MaxHealth, RespawnTime
local speedBox = labeledTextbox(main, "WalkSpeed:", 13, 44)
local jumpBox = labeledTextbox(main, "JumpPower:", 78, 80)
local healthBox = labeledTextbox(main, "MaxHealth:", 206, 116)
local respawnBox = labeledTextbox(main, "Respawn (s):", 7, 152)

-- Debug toggle
local debugLabel = make("TextLabel", {
    Parent = main,
    Size = UDim2.new(0.6,0,0,28),
    Position = UDim2.new(0.02,0,0.6,0),
    BackgroundTransparency = 1,
    Text = "Debug Mode:",
    TextSize = 14,
    TextColor3 = Color3.new(1,1,1),
    Font = Enum.Font.SourceSans
})
local debugToggle = make("TextButton", {
    Parent = main,
    Size = UDim2.new(0.36,0,0,28),
    Position = UDim2.new(0.62,0,0.6,0),
    Text = "OFF",
    TextSize = 14,
    Font = Enum.Font.SourceSans,
})

-- Weapons list
local weaponLabel = make("TextLabel", {
    Parent = main,
    Size = UDim2.new(1,0,0,24),
    Position = UDim2.new(0,0,0.72,0),
    BackgroundTransparency = 1,
    Text = "Weapons (click to fire):",
    TextColor3 = Color3.new(1,1,1),
    TextSize = 14,
    Font = Enum.Font.SourceSans
})

local weaponsFrame = make("Frame", {Parent = main, Size = UDim2.new(1,0,0,64), Position = UDim2.new(0,0,0.78,0), BackgroundTransparency = 1})

-- Example weapon buttons (names must match server-side indexing)
local weaponNames = {"Sword", "Bow", "Staff"}
for i,name in ipairs(weaponNames) do
    local btn = make("TextButton", {
        Parent = weaponsFrame,
        Size = UDim2.new(0.32,0,0,28),
        Position = UDim2.new((i-1)*0.335,0,0,0),
        Text = name,
        TextSize = 14,
        Font = Enum.Font.SourceSans
    })

    btn.MouseButton1Click:Connect(function()
        -- Find nearest target player as a demo
        local closest, dist = nil, 1e9
        local myChar = player.Character
        if not myChar or not myChar.PrimaryPart then return end
        for _,pl in pairs(Players:GetPlayers()) do
            if pl ~= player and pl.Character and pl.Character.PrimaryPart then
                local d = (myChar.PrimaryPart.Position - pl.Character.PrimaryPart.Position).Magnitude
                if d < dist then
                    dist = d; closest = pl
                end
            end
        end
        if closest then
            -- damageEvent expects (targetPlayer, damageAmount, weaponIndex) on server
            damageEvent:FireServer(closest, nil, i)
        else
            StarterGui:SetCore("SendNotification", {Title = "Combat UI", Text = "No target found nearby."})
        end
    end)
end

-- Apply button — applies values locally and optionally requests server-side update
local applyBtn = make("TextButton", {Parent = main, Size = UDim2.new(0.96,0,0,34), Position = UDim2.new(0.02,0,0.86,0), Text = "Apply Settings", TextSize = 16, Font = Enum.Font.SourceSansBold})

-- Toggle state
local debugState = false

debugToggle.MouseButton1Click:Connect(function()
    debugState = not debugState
    debugToggle.Text = debugState and "ON" or "OFF"
end)

-- Utility to parse number
local function parseNumber(txt, fallback)
    local n = tonumber(txt)
    if n == nil then return fallback or 0 end
    return n
end

applyBtn.MouseButton1Click:Connect(function()
    local speed = parseNumber(speedBox.Text, 13)
    local jump = parseNumber(jumpBox.Text, 78)
    local maxHealth = parseNumber(healthBox.Text, 206)
    local respawn = parseNumber(respawnBox.Text, 7)

    -- Apply locally (client-side immediate feel)
    local char = player.Character
    if char and char:FindFirstChild("Humanoid") then
        local h = char.Humanoid
        h.WalkSpeed = speed
        h.JumpPower = jump
        h.MaxHealth = maxHealth
        h.Health = math.min(h.Health, maxHealth)
    end

    -- Optionally request server to change authoritative CONFIG (server must implement security checks)
    if changeConfigRemote then
        changeConfigRemote:FireServer({speed = speed, jumpPower = jump, maxHealth = maxHealth, respawnTime = respawn, debugMode = debugState})
    end

    StarterGui:SetCore("SendNotification", {Title = "Combat UI", Text = "Settings applied."})
end)

-- Small draggable behavior for main frame
local UIS = game:GetService("UserInputService")
local dragging, dragInput, dragStart, startPos

local function update(input)
    local delta = input.Position - dragStart
    main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

main.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = main.Position

        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

main.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)

UIS.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)

-- Optional: listen for server damage effect notifications to show brief UI feedback
if remotes:FindFirstChild("DamageEffect") then
    remotes.DamageEffect.OnClientEvent:Connect(function(amount)
        StarterGui:SetCore("SendNotification", {Title = "Hit!", Text = "Damage: "..tostring(amount), Duration = 1})
    end)
end

-- END of LocalScript


-- Optional server helper (place into a Script in ServerScriptService)
-- This server script shows a safe pattern for processing change requests from clients.
-- Add only if you trust players or implement an admin check.
--[[
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local remotes = ReplicatedStorage:WaitForChild("Remotes")
local changeConfigRemote = Instance.new("RemoteEvent")
changeConfigRemote.Name = "ChangeConfigRequest"
changeConfigRemote.Parent = remotes

local admins = {
    -- put trusted userIds here, e.g. [123456] = true
}

changeConfigRemote.OnServerEvent:Connect(function(player, newConfig)
    -- Basic admin check
    if not admins[player.UserId] then
        warn("Player "..player.Name.." attempted to change server config")
        return
    end

    -- Validate and apply to server-side CONFIG (you must expose CONFIG in a module or adapt your script)
    -- Example: require the module and update safe fields only.
end)
]]--
