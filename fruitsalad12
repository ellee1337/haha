-- Robust Fly + ESP (Drawing or BillboardGui fallback) + Rayfield UI
-- - Detects Drawing availability, updates camera each frame
-- - Proper cleanup on player leave/respawn
-- - Keeps Fly (E toggle)
-- - No color picker (color set by ESP.Color)

-- Load Rayfield
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- ---------- Fly (unchanged, reliable) ----------
local flying = false
local flySpeed = 50
local bodyGyro, bodyVel

local function startFly()
    local char = LocalPlayer.Character
    if not char then return end
    local hrp = char:FindFirstChild("HumanoidRootPart")
    local hum = char:FindFirstChildOfClass("Humanoid")
    if not hrp or not hum then return end

    bodyGyro = Instance.new("BodyGyro", hrp)
    bodyGyro.P = 9e4
    bodyGyro.MaxTorque = Vector3.new(9e9,9e9,9e9)
    bodyGyro.CFrame = hrp.CFrame

    bodyVel = Instance.new("BodyVelocity", hrp)
    bodyVel.MaxForce = Vector3.new(9e9,9e9,9e9)
    bodyVel.Velocity = Vector3.new(0,0.1,0)

    hum.PlatformStand = true

    while flying and task.wait() do
        local camCF = workspace.CurrentCamera and workspace.CurrentCamera.CFrame or CFrame.new()
        local dir = Vector3.new()

        if UserInputService:IsKeyDown(Enum.KeyCode.W) then dir = dir + camCF.LookVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then dir = dir - camCF.LookVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then dir = dir - camCF.RightVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then dir = dir + camCF.RightVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.Space) then dir = dir + Vector3.yAxis end
        if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then dir = dir - Vector3.yAxis end

        bodyVel.Velocity = dir * flySpeed
        bodyGyro.CFrame = camCF
    end

    if bodyGyro then bodyGyro:Destroy() bodyGyro = nil end
    if bodyVel then bodyVel:Destroy() bodyVel = nil end
    local hum2 = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if hum2 then hum2.PlatformStand = false end
end

UserInputService.InputBegan:Connect(function(inp, gpe)
    if gpe then return end
    if inp.KeyCode == Enum.KeyCode.E then
        flying = not flying
        if flying then
            task.spawn(startFly)
        end
    end
end)

-- ---------- ESP Core ----------
local ESP = {
    Enabled = false,
    Boxes = true,
    Names = true,
    BoxShift = CFrame.new(0, -1.5, 0),
    BoxSize = Vector3.new(4, 6, 0),
    Color = Color3.fromRGB(255,170,0),
    Thickness = 2,
    Objects = {}, -- map: character/model -> data
    UseDrawing = false, -- set below
}

-- detect Drawing availability
local ok, _ = pcall(function() return Drawing.new end)
ESP.UseDrawing = ok

-- helpers for Drawing
local function drawNew(typeName, props)
    local obj = Drawing.new(typeName)
    for k,v in pairs(props or {}) do obj[k] = v end
    return obj
end

-- create visual components for a character (drawing or billboard fallback)
local function createVisuals(char, player)
    if ESP.UseDrawing then
        -- Use Drawing API
        local quad = drawNew("Quad", {
            Thickness = ESP.Thickness,
            Color = ESP.Color,
            Filled = false,
            Visible = false,
        })
        local nameTxt = drawNew("Text", {
            Text = player.Name,
            Center = true,
            Outline = true,
            Size = 18,
            Color = ESP.Color,
            Visible = false,
        })
        local distTxt = drawNew("Text", {
            Text = "",
            Center = true,
            Outline = true,
            Size = 16,
            Color = ESP.Color,
            Visible = false,
        })
        return {type="drawing", Quad=quad, Name=nameTxt, Dist=distTxt}
    else
        -- BillboardGui fallback
        local hrp = char:FindFirstChild("HumanoidRootPart")
        if not hrp then return nil end
        local bgui = Instance.new("BillboardGui")
        bgui.Name = "ESP_Billboard"
        bgui.AlwaysOnTop = true
        bgui.Size = UDim2.new(0,150,0,50)
        bgui.StudsOffset = Vector3.new(0,2.5,0)
        bgui.Parent = hrp

        local frame = Instance.new("Frame", bgui)
        frame.Size = UDim2.new(1,0,1,0)
        frame.BackgroundTransparency = 1

        local lbl = Instance.new("TextLabel", frame)
        lbl.Size = UDim2.new(1,0,0,18)
        lbl.Position = UDim2.new(0,0,0,0)
        lbl.BackgroundTransparency = 1
        lbl.Text = player.Name
        lbl.TextScaled = true
        lbl.TextColor3 = ESP.Color
        lbl.TextStrokeTransparency = 0.5

        local dist = Instance.new("TextLabel", frame)
        dist.Size = UDim2.new(1,0,0,14)
        dist.Position = UDim2.new(0,0,1, -18)
        dist.BackgroundTransparency = 1
        dist.Text = ""
        dist.TextScaled = true
        dist.TextColor3 = ESP.Color
        dist.TextStrokeTransparency = 0.7

        return {type="billboard", Gui=bgui, NameLabel=lbl, DistLabel=dist}
    end
end

local function removeVisuals(dt)
    if not dt then return end
    if dt.type == "drawing" then
        for _,v in pairs(dt) do
            if type(v) == "table" and v.Remove then
                pcall(function() v.Visible = false v:Remove() end)
            end
        end
    elseif dt.type == "billboard" then
        if dt.Gui and dt.Gui.Parent then
            pcall(function() dt.Gui:Destroy() end)
        end
    end
end

local function addCharacterToESP(char)
    local player = Players:GetPlayerFromCharacter(char)
    if not player or player == LocalPlayer then return end
    -- avoid double-add
    if ESP.Objects[char] then return end

    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then
        -- wait a little for HRP
        hrp = char:WaitForChild("HumanoidRootPart", 5)
        if not hrp then return end
    end

    local visuals = createVisuals(char, player)
    if not visuals then return end

    ESP.Objects[char] = {
        Player = player,
        PrimaryPart = hrp,
        Visuals = visuals
    }

    -- cleanup when character removed
    char.AncestryChanged:Connect(function(_, parent)
        if not parent then
            removeVisuals(ESP.Objects[char] and ESP.Objects[char].Visuals)
            ESP.Objects[char] = nil
        end
    end)
    -- remove on death
    local hum = char:FindFirstChildOfClass("Humanoid")
    if hum then
        hum.Died:Connect(function()
            removeVisuals(ESP.Objects[char] and ESP.Objects[char].Visuals)
            ESP.Objects[char] = nil
        end)
    end
end

-- hook existing players
for _,p in pairs(Players:GetPlayers()) do
    if p ~= LocalPlayer then
        if p.Character then
            task.spawn(addCharacterToESP, p.Character)
        end
        p.CharacterAdded:Connect(function(c) addCharacterToESP(c) end)
    end
end
Players.PlayerAdded:Connect(function(p)
    if p ~= LocalPlayer then
        p.CharacterAdded:Connect(function(c) addCharacterToESP(c) end)
        if p.Character then task.spawn(addCharacterToESP, p.Character) end
    end
end)
Players.PlayerRemoving:Connect(function(p)
    -- remove visuals for that player's character(s)
    for char,data in pairs(ESP.Objects) do
        if data.Player == p then
            removeVisuals(data.Visuals)
            ESP.Objects[char] = nil
        end
    end
end)

-- Update loop
RunService.RenderStepped:Connect(function()
    Camera = workspace.CurrentCamera or Camera
    for char,data in pairs(ESP.Objects) do
        if not data.PrimaryPart or not data.PrimaryPart.Parent then
            removeVisuals(data.Visuals)
            ESP.Objects[char] = nil
        else
            local cf = data.PrimaryPart.CFrame
            local size = ESP.BoxSize or Vector3.new(4,6,0)
            if data.Visuals.type == "drawing" then
                -- compute corners
                local cf2 = cf * ESP.BoxShift
                local tl = (cf2 * CFrame.new(size.X/2, size.Y/2, 0)).p
                local tr = (cf2 * CFrame.new(-size.X/2, size.Y/2, 0)).p
                local bl = (cf2 * CFrame.new(size.X/2, -size.Y/2, 0)).p
                local br = (cf2 * CFrame.new(-size.X/2, -size.Y/2, 0)).p
                local tagp = (cf2 * CFrame.new(0, size.Y/2, 0)).p

                local topLeft, vis1 = Camera:WorldToViewportPoint(tl)
                local topRight, vis2 = Camera:WorldToViewportPoint(tr)
                local bottomLeft, vis3 = Camera:WorldToViewportPoint(bl)
                local bottomRight, vis4 = Camera:WorldToViewportPoint(br)
                local tagPos, vis5 = Camera:WorldToViewportPoint(tagp)

                local quad = data.Visuals.Quad
                local nameTxt = data.Visuals.Name
                local distTxt = data.Visuals.Dist

                if (vis1 or vis2 or vis3 or vis4) and ESP.Boxes then
                    quad.Visible = true
                    quad.PointA = Vector2.new(topRight.X, topRight.Y)
                    quad.PointB = Vector2.new(topLeft.X, topLeft.Y)
                    quad.PointC = Vector2.new(bottomLeft.X, bottomLeft.Y)
                    quad.PointD = Vector2.new(bottomRight.X, bottomRight.Y)
                    quad.Color = ESP.Color
                    quad.Thickness = ESP.Thickness
                else
                    quad.Visible = false
                end

                if vis5 and ESP.Names then
                    nameTxt.Visible = true
                    nameTxt.Position = Vector2.new(tagPos.X, tagPos.Y)
                    nameTxt.Text = data.Player.Name
                    nameTxt.Color = ESP.Color
                    distTxt.Visible = true
                    distTxt.Position = Vector2.new(tagPos.X, tagPos.Y + 16)
                    local dist = math.floor((Camera.CFrame.p - cf.p).magnitude)
                    distTxt.Text = tostring(dist) .. "m"
                    distTxt.Color = ESP.Color
                else
                    nameTxt.Visible = false
                    distTxt.Visible = false
                end

                -- hide all if ESP disabled
                if not ESP.Enabled then
                    quad.Visible = false
                    nameTxt.Visible = false
                    distTxt.Visible = false
                end
            elseif data.Visuals.type == "billboard" then
                local gui = data.Visuals.Gui
                if gui and gui.Parent then
                    data.Visuals.NameLabel.Text = (ESP.Names and data.Player.Name) or ""
                    local dist = math.floor((Camera.CFrame.p - cf.p).magnitude)
                    data.Visuals.DistLabel.Text = (ESP.Names and (tostring(dist).."m")) or ""
                    data.Visuals.NameLabel.TextColor3 = ESP.Color
                    data.Visuals.DistLabel.TextColor3 = ESP.Color
                    -- hide entire GUI if ESP disabled
                    gui.Enabled = ESP.Enabled
                end
            end
        end
    end
end)

-- ---------- Rayfield UI (ESP toggles) ----------
local Window = Rayfield:CreateWindow({
    Name = "Fly + ESP Menu",
    LoadingTitle = "Fly & ESP",
    LoadingSubtitle = "Rayfield UI",
    ConfigurationSaving = {Enabled = false},
})

local MainTab = Window:CreateTab("Main", 4483362458)

MainTab:CreateToggle({
    Name = "ESP Enabled",
    CurrentValue = false,
    Flag = "ESPEnabled",
    Callback = function(val)
        ESP.Enabled = val
        -- when enabling, populate visuals for any existing chars missed
        if val then
            for _,p in pairs(Players:GetPlayers()) do
                if p ~= LocalPlayer and p.Character then addCharacterToESP(p.Character) end
            end
        else
            -- hide drawing objects immediately
            for _,d in pairs(ESP.Objects) do
                if d.Visuals then
                    if d.Visuals.type == "drawing" then
                        pcall(function()
                            d.Visuals.Quad.Visible = false
                            d.Visuals.Name.Visible = false
                            d.Visuals.Dist.Visible = false
                        end)
                    elseif d.Visuals.type == "billboard" then
                        if d.Visuals.Gui then d.Visuals.Gui.Enabled = false end
                    end
                end
            end
        end
    end
})

MainTab:CreateToggle({
    Name = "Show Boxes",
    CurrentValue = true,
    Callback = function(v) ESP.Boxes = v end
})

MainTab:CreateToggle({
    Name = "Show Names + Distance",
    CurrentValue = true,
    Callback = function(v) ESP.Names = v end
})

MainTab:CreateButton({
    Name = "Show Controls",
    Callback = function()
        Rayfield:Notify({
            Title = "Controls",
            Content = "Toggle Fly: [E]\nOpen Menu: RightCtrl (Rayfield default)",
            Duration = 6
        })
    end
})

-- done
